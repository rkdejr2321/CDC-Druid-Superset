version: "3.8"

services:

  src-mysql:
    container_name: src_mysql
    image: debezium/example-mysql
    restart: always
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      # 소스 디비 생성
      MYSQL_DATABASE: src_db

  target-mysql:
    container_name: target_mysql
    image: debezium/example-mysql
    restart: always
    ports:
      - "3308:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      # 소스 디비 생성
      MYSQL_DATABASE: target_db

  mongo:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: sweep
      MONGO_INITDB_ROOT_PASSWORD: sweep
      MONGO_INITDB_DATABASE: target_db

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - "8086:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://sweep:sweep@mongo:27017/


  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka
    restart: always
    volumes:
      - tutorial:/opt/druid/quickstart/tutorial
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOO_MY_ID: 1
      
  debezium:
    container_name: debezium
    image: debezium/connect:latest
    ports:
      - 8085:8083
    depends_on:
      - zookeeper
      - kafka
      - src-mysql
      - target-mysql
    environment:
      GROUP_ID: 1
      BOOTSTRAP_SERVERS: kafka:29092
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: cluster-kafka-ui
    restart: always
    ports:
      - "9998:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: PLAINTEXT://kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: "zookeeper:2181"
    depends_on:
      - zookeeper
      - kafka

  spring-kafka:
    image: qkdrmsgh73/spring-kafka
    container_name: spring-kafka
    platform: linux/amd64
    build:
      context: ./
      dockerfile: Dockerfile
    ports:
      - "9999:8080"
    restart: on-failure
    depends_on:
      - target-mysql
      - kafka

  postgres:
    container_name: postgres
    image: postgres:latest
    volumes:
      - metadata_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=FoolishPassword
      - POSTGRES_USER=druid
      - POSTGRES_DB=druid

  historical:
    image: apache/druid:24.0.1
    container_name: historical
    volumes:
      - druid_shared:/opt/shared
      - historical_var:/opt/druid/var
      - tutorial:/opt/druid/quickstart/tutorial
    depends_on:
      - zookeeper
      - postgres
    ports:
      - "9997:8083"
    command:
      - historical
    env_file:
      - environment

volumes:
  metadata_data: {}
  middle_var: {}
  historical_var: {}
  broker_var: {}
  coordinator_var: {}
  router_var: {}
  druid_shared: {}
  tutorial: {}


